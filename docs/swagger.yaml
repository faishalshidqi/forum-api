components:
  schemas:
    domains.AddCommentResponse:
      properties:
        data:
          $ref: '#/components/schemas/domains.AddCommentResponseData'
        message:
          type: string
        status:
          type: string
      type: object
    domains.AddCommentResponseData:
      properties:
        content:
          type: string
        id:
          type: string
        owner:
          type: string
      type: object
    domains.AddThreadResponse:
      properties:
        data:
          $ref: '#/components/schemas/domains.AddThreadResponseData'
        message:
          type: string
        status:
          type: string
      type: object
    domains.AddThreadResponseData:
      properties:
        id:
          type: string
        owner:
          type: string
        title:
          type: string
      type: object
    domains.ErrorResponse:
      properties:
        message:
          type: string
        status:
          type: string
      type: object
    domains.LoginResponse:
      properties:
        data:
          $ref: '#/components/schemas/domains.LoginResponseData'
        status:
          type: string
      type: object
    domains.LoginResponseData:
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      type: object
    domains.RefreshResponse:
      properties:
        data:
          $ref: '#/components/schemas/domains.RefreshResponseData'
        status:
          type: string
      type: object
    domains.RefreshResponseData:
      properties:
        accessToken:
          type: string
      type: object
    domains.SignupResponse:
      properties:
        data:
          $ref: '#/components/schemas/domains.SignupResponseData'
        message:
          type: string
        status:
          type: string
      type: object
    domains.SignupResponseData:
      properties:
        fullname:
          type: string
        id:
          type: string
        username:
          type: string
      type: object
    domains.SuccessResponse:
      properties:
        message:
          type: string
        status:
          type: string
      type: object
  securitySchemes:
    bearerauth:
      bearerFormat: JWT
      scheme: bearer
      type: http
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
info:
  description: This is a Forum API
  title: Forum API
  version: "1.0"
openapi: 3.1.0
paths:
  /authentications:
    delete:
      description: Signing User Out. Requires refresh token
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: refresh token possessed by the user
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.SuccessResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Bad Request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Internal Server Error
      summary: Sign Out
      tags:
      - authentication
    post:
      description: authenticate user
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: password of the user
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.LoginResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Internal Server Error
      summary: Login with Username & Password
      tags:
      - authentication
    put:
      description: Generating new access token using a refresh token. Only valid refresh
        token will generate new
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: refresh token possessed by the user
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.RefreshResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Internal Server Error
      summary: Refresh Authentication
      tags:
      - authentication
  /threads:
    post:
      description: Creating a new thread. Only valid users can create a thread
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: body of the thread
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.AddThreadResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Unauthorized
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Internal Server Error
      summary: Create Thread
      tags:
      - threads
  /threads/{thread_id}/comments:
    delete:
      description: Soft Delete a  comment. Only valid users can delete their own comment
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Thread ID
        in: path
        name: thread_id
        required: true
        schema:
          type: string
      - description: Comment ID
        in: path
        name: comment_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.AddCommentResponse'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Internal Server Error
      summary: Soft Delete Comment
      tags:
      - comments
    post:
      description: Creating a new comment. Only valid users can create a comment to
        a valid thread
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        schema:
          type: string
      - description: Thread ID
        in: path
        name: thread_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: content of the comment
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.AddCommentResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Internal Server Error
      summary: Create Comment
      tags:
      - comments
  /users:
    post:
      description: New user must have a unique email address
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: name of the new user
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.SignupResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Bad Request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Conflict
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domains.ErrorResponse'
          description: Internal Server Error
      summary: Register A User
      tags:
      - users
servers:
- url: localhost:9000
