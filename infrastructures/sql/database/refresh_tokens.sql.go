// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addToken = `-- name: AddToken :one
insert into refresh_tokens (token, owner) values($1, $2) returning token, owner
`

type AddTokenParams struct {
	Token string      `db:"token" json:"token"`
	Owner pgtype.UUID `db:"owner" json:"owner"`
}

func (q *Queries) AddToken(ctx context.Context, arg AddTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, addToken, arg.Token, arg.Owner)
	var i RefreshToken
	err := row.Scan(&i.Token, &i.Owner)
	return i, err
}

const deleteToken = `-- name: DeleteToken :one
delete from refresh_tokens where token = $1 returning token, owner
`

func (q *Queries) DeleteToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, deleteToken, token)
	var i RefreshToken
	err := row.Scan(&i.Token, &i.Owner)
	return i, err
}

const getToken = `-- name: GetToken :one
select token, owner from refresh_tokens where token = $1
`

func (q *Queries) GetToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getToken, token)
	var i RefreshToken
	err := row.Scan(&i.Token, &i.Owner)
	return i, err
}
