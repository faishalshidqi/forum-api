// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
insert into comments(id, owner, thread, content, date) values(gen_random_uuid(), $1, $2, $3, now()) returning id, content, owner
`

type CreateCommentParams struct {
	Owner   pgtype.UUID `db:"owner" json:"owner"`
	Thread  pgtype.UUID `db:"thread" json:"thread"`
	Content string      `db:"content" json:"content"`
}

type CreateCommentRow struct {
	ID      pgtype.UUID `db:"id" json:"id"`
	Content string      `db:"content" json:"content"`
	Owner   pgtype.UUID `db:"owner" json:"owner"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (CreateCommentRow, error) {
	row := q.db.QueryRow(ctx, createComment, arg.Owner, arg.Thread, arg.Content)
	var i CreateCommentRow
	err := row.Scan(&i.ID, &i.Content, &i.Owner)
	return i, err
}

const getCommentById = `-- name: GetCommentById :one
select id, owner, thread, content, date, is_deleted from comments where id = $1
`

func (q *Queries) GetCommentById(ctx context.Context, id pgtype.UUID) (Comment, error) {
	row := q.db.QueryRow(ctx, getCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Thread,
		&i.Content,
		&i.Date,
		&i.IsDeleted,
	)
	return i, err
}

const getCommentsByThread = `-- name: GetCommentsByThread :many
select comments.id, users.username, comments.date, comments.content from comments join users on comments.owner = users.id where thread = $1 order by date asc
`

type GetCommentsByThreadRow struct {
	ID       pgtype.UUID      `db:"id" json:"id"`
	Username string           `db:"username" json:"username"`
	Date     pgtype.Timestamp `db:"date" json:"date"`
	Content  string           `db:"content" json:"content"`
}

func (q *Queries) GetCommentsByThread(ctx context.Context, thread pgtype.UUID) ([]GetCommentsByThreadRow, error) {
	rows, err := q.db.Query(ctx, getCommentsByThread, thread)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByThreadRow
	for rows.Next() {
		var i GetCommentsByThreadRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Date,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteComment = `-- name: SoftDeleteComment :exec
update comments set is_deleted = true, content = text '**comment is deleted**' where id = $1
`

func (q *Queries) SoftDeleteComment(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, softDeleteComment, id)
	return err
}
