// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into users (id, username, password, fullname, created_at, updated_at) values(gen_random_uuid(), lower($1), $2, lower($3), now(), now()) returning id, username, fullname
`

type CreateUserParams struct {
	Username string `db:"username" json:"username"`
	Password string `db:"password" json:"password"`
	Fullname string `db:"fullname" json:"fullname"`
}

type CreateUserRow struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	Username string      `db:"username" json:"username"`
	Fullname string      `db:"fullname" json:"fullname"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password, arg.Fullname)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username, &i.Fullname)
	return i, err
}

const getByUsername = `-- name: GetByUsername :one
select id, username, password, fullname, created_at, updated_at from users where username = $1
`

func (q *Queries) GetByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Fullname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select id, username, password, fullname, created_at, updated_at from users where id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Fullname,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, username, password, fullname, created_at, updated_at from users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Fullname,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
